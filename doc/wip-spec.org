#+title: Minimal Intercal C Language Specification
#+author: Qifan Wang

This is a draft

* Summary

** Currently supported

Note that the tokenizer assumes the host Common Lisp has
been properly setup that the stream converts =\n= or =\r\n=
to a dedicated =#\Newline= character according to platform's
convention.

- All keywords from ISO C99
- C99 decimal and octal integers
- C99 identifiers
- All C99 punctuactors except =##= and =%:%:=, they are
  only used in preprocessor.
- =/* */= and =//= comment

** Planned but not implemented

At current stage, these can result in unexpected error
been reported while lexing. There might be a chance they get
implemented when parser has been started, or maybe not.

- Strings and character literals
- Token =...=

TBD

** Differences to ISO C99

The parsing does not adhere to C99 specification when it comes to how
comment and preprocessing instructions are handled. In fact,
this compiler does not attempt to expand C macros.

*** C99 features intentionally not supported

- Trigraph. They are cause trouble and even disabled by default in
  modern compilers.
- =\= follow by newline. It has little use outside defining
  C macros, thus only partially supported in macro instructions
  and single line comments.
- =L= prefix to string and character literals. It adds complexity
  to tokenization, and the compiler does not plan to support
  width char.

* Specification

** Lexical Elements

Note that ='\\'= appears in the grammar actually denotes a single =\=
character.

Tokens are optionally separated by one or more whitespaces.

Identifiers, keywords, or constants must be delimited by whitespaces,
comments, strings or punctuators.

#+BEGIN_EXAMPLE
  token:
    keyword
    identifier
    constant
    punctuator
    comment
    preprocessor-instruction
  whitespace:
    space
    tab
    newline
  space:   '\s'
  tab:     '\t'
  newline: '\n'
#+END_EXAMPLE

*** Keywords

They are:
- =auto=
- =break=
- =case=
- =char=
- =const=
- =continue=
- =default=
- =do=
- =double=
- =else=
- =enum=
- =extern=
- =float=
- =for=
- =goto=
- =if=
- =inline=
- =int=
- =long=
- =register=
- =restrict=
- =return=
- =short=
- =signed=
- =sizeof=
- =static=
- =struct=
- =switch=
- =typedef=
- =union=
- =unsigned=
- =void=
- =volatile=
- =while=
- =_Bool=
- =_Complex=
- =_Imaginary=

*** Identifier

#+BEGIN_EXAMPLE
  identifier:
    nondigit
    identifier nondigit
    identifier digit
  nondigit: one of
    '_' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P'
    'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'
    'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p'
    'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'
  digit: one of
    '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'
#+END_EXAMPLE

*** Constant

#+BEGIN_EXAMPLE
  constant:
    integer-constant
    character-constant
    string-constant
#+END_EXAMPLE

**** Integers

#+BEGIN_EXAMPLE
  integer-constant:
    decimal-constant integer-suffix?
    octal-constant integer-suffix?
  decimal-constant:
    nonzero-digit
    decimal-constant digit
  octal-constant:
    '0'
    octal-constant octal-digit
  nonzero-digit: one of
    '1' '2' '3' '4' '5' '6' '7' '8' '9'
  octal-digit: one of
    '0' '1' '2' '3' '4' '5' '6' '7'
#+END_EXAMPLE

Obviously, =0= is an octal constant.

**** Character literal

#+BEGIN_EXAMPLE
  character-constant:
    '\'' c-char* '\''
  c-char:
    "any character except '\'', '\\', or '\n'"
    escape-sequence
  escape-sequence: one of
    '\\\'' '\\\"' '\\?' '\\\\' '\\a' '\\b'
    '\\f' '\\n' '\\r' '\\t' '\\v'
#+END_EXAMPLE

**** String literal

#+BEGIN_EXAMPLE
  string-literal:
    '"' s-char* '"'
  s-char:
    "any character except '"', '\\', or '\n'"
    escape-sequence
  escape-sequence: one of
    '\\\'' '\\\"' '\\?' '\\\\' '\\a' '\\b'
    '\\f' '\\n' '\\r' '\\t' '\\v'
#+END_EXAMPLE

*** Comment syntax and Preprocessor instructions

#+BEGIN_EXAMPLE
  comment:
    multiline-comment
    singleline-comment
  multiline-comment:
    '/*' "text that does not contain '*/'" '*/'
  singleline-comment:
    '//' [ "text that does not contain '\n'" '\\' '\n' ]*
           "text that does not contain '\n'"? '\n'
  preprocessor-instruction:
    '#' [ "text that does not contain '\n'" '\\' '\n' ]*
          "text that does not contain '\n'"? '\n'
#+END_EXAMPLE

A multi-line comment starts with =/*= and can contain any character
sequences except the ending sequence, and ends with =*/=.

A single line comment starts with =//= and ends with a newline
that is not prefixed by the line continuation character =\=.

Preprocessor instructions is similar to single line comment
except starts with =#=.

Note that the example below is a valid comment in C99 but not accepted
by the above grammar.
#+BEGIN_SRC C
/\
/ foo
#+END_SRC

** Grammar

#+BEGIN_EXAMPLE
program:
  toplevel+

toplevel:
  function
  toplevel-variable-declaration

toplevel-variable-declaration:
  type indentifier '=' constant ';'
#+END_EXAMPLE

The grammar for C functions closely resembles K&R C, but
with a few differences.

#+BEGIN_EXAMPLE
function:
  type identifier '(' varlist? ')'
    variable-declaration
    '{' statement* '}'
varlist:
  identifier (',' varlist)*
statement:
  return-statement
  variable-declaration
  increment
  decrement
  assignment
  coditional-goto
  unconditional-goto
  label

increment:
  identifier '++'

decrement:
  identifier '--'

variable-declaration:
  type varilist ';'

return-statement:
  'return' expr ';'

assignment:
  identifier '=' expr ';'

expr:
  identifier
  constant
  binary-op

binary-op:
  atom '+' atom
  atom '-' atom

atom:
  identifier
  constant

computed-goto:
  'if' '(' compare ')' 'goto' identifier ';'

unconditional-goto:
  'goto' identifier ';'

label:
  identifier ':'

compare:
  atom '<' atom
  atom '>' atom
  atom '==' atom

type:
  'void'
  'char'
  'short'
  'int'
  'long'
  'signed'
  'unsigned'
  type '*'
#+END_EXAMPLE

** Compiler Passes

*** Pass 1
Generate unique variable name.

*** Pass 2 *
Removed assignment to un-referenced variables. Repress allocation for
unused variables.

*** Pass 3 *
Constant folding of variable assignment and value comparison
in =if= statement.

*** Pass 4
Generate assembly style code

*** Pass 5 *
Removal of dead code result from =jmp=.

** Example

#+BEGIN_EXAMPLE
int main(argc, argv)
     int argc;
     char **argv;
{
  char /**/a,b,c;
  c= a + 1;
  a = 0x0a + 1;
  b = 0;
 L1: b++;
  if (b < a) goto L1;
  if (1 < 2) goto L2;
  return a + b;
 L2: return 0;
}

Parsing file test/more.c.

(PROGN (DEFUN (("int") #<token #|main|# at (4 . 0)>
               (#<token #|argc|# at (9 . 0)>
                #<token #|argv|# at (15 . 0)>)) (DEFVAR
                                                 ("char")
                                                 (#<token #|a|# at (11
                                                                    . 4)>
                                                  #<token #|b|# at (13
                                                                    . 4)>
                                                  #<token #|c|# at (15
                                                                    . 4)>))
         (SETQ #<token #|c|# at (2 . 5)>
               (+ #<token #|a|# at (5 . 5)> 1))
         (SETQ #<token #|a|# at (2 . 6)> (+ 10 1))
         (SETQ #<token #|b|# at (2 . 7)> 0)
         (LABELS #<token #|L1|# at (1 . 8)>)
         (INCF #<token #|b|# at (5 . 8)>)
         (IF (< #<token #|b|# at (6 . 9)> #<token #|a|# at (10 . 9)>)
             (GO #<token #|L1|# at (18 . 9)>))
         (IF (< 1 2) (GO #<token #|L2|# at (18 . 10)>))
         (RETURN (+ #<token #|a|# at (9 . 11)>
                    #<token #|b|# at (13 . 11)>))
         (LABELS #<token #|L2|# at (1 . 12)>)
         (RETURN 0)))
Generate pass 1.

(PROG ()
      (("main" (0 2 5) (SETQ "G4" (+ "G2" 1)) (SETQ "G2" (+ 10 1))
        (SETQ "G3" 0) (LABELS "L1") (INCF "G3")
        (IF (< "G3" "G2") (GO "L1")) (IF (< 1 2) (GO "L2"))
        (RETURN (+ "G2" "G3")) (LABELS "L2") (RETURN 0)))
      5)
Generate pass 2.

(PROG ()
      (("main" (0 2 5) (SETQ "G2" (+ 10 1)) (SETQ "G3" 0)
        (LABELS "L1") (INCF "G3") (IF (< "G3" "G2") (GO "L1"))
        (IF (< 1 2) (GO "L2")) (RETURN (+ "G2" "G3")) (LABELS "L2")
        (RETURN 0)))
      #(NIL NIL T T NIL))
Generate pass 3.

(PROG ()
      (("main" (0 2 5) (SETQ "G2" 11) (SETQ "G3" 0) (LABELS "L1")
        (INCF "G3") (IF (< "G3" "G2") (GO "L1")) (GO "L2")
        (RETURN (+ "G2" "G3")) (LABELS "L2") (RETURN 0)))
      #(NIL NIL T T NIL))
Generate pass 4.

(PROG ()
      (("main" (0 2 5) ("mov" "G2" 11) ("mov" "G3" 0) (LABELS "L1")
        ("inc" "G3") ("cmp" "G3" "G2") ("jl" "L1") ("jmp" "L2")
        ("mov" "eax" "G2") ("add" "eax" "G3") ("ret") (LABELS "L2")
        ("mov" "eax" 0) ("ret")))
      #(NIL NIL T T NIL))
Generate pass 5.

(PROG ()
      (("main" (0 2 5) ("mov" "G2" 11) ("mov" "G3" 0) (LABELS "L1")
        ("inc" "G3") ("cmp" "G3" "G2") ("jl" "L1") ("mov" "eax" 0)
        ("ret")))
      #(NIL NIL T T NIL))

Compiling file test/more.c.
.code
main proc
 pop eax
 pop eax
 mov G2, 11
 mov G3, 0
L1
 inc G3
 cmp G3, G2
 jl L1
 mov eax, 0
 ret
main endp
.data
G2 sdword ?
G3 sdword ?
 end

With out optimization:

Compiling file test/more.c.
.code
main proc
 pop G0
 pop G1
 mov eax, G2
 add eax, 1
 mov G4, eax
 mov eax, 10
 add eax, 1
 mov G2, eax
 mov G3, 0
L1
 inc G3
 cmp G3, G2
 jl L1
 cmp 1, 2
 jl L2
 mov eax, G2
 add eax, G3
 ret 
L2
 mov eax, 0
 ret 
main endp
.data
G0 sdword ?
G1 sdword ?
G2 sdword ?
G3 sdword ?
G4 sdword ?
 end
#+END_EXAMPLE
